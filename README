# MyContainer Project

Author: [eitan.derdiger@gmail.com]
Course: Systems Programming – Templates, Functors, Containers & Iterators

---

## Overview

`MyContainer<T>` is a generic C++ container for comparable elements that supports dynamic insertion, removal, and six custom iteration patterns:

* `Order`: Insertion order (default)
* `AscendingOrder`: Sorted by value ascending
* `DescendingOrder`: Sorted by value descending
* `ReverseOrder`: Reverse insertion order
* `SideCrossOrder`: Alternating smallest/largest
* `MiddleOutOrder`: Center-first, then left/right alternation

All iterators are implemented as nested classes of `MyContainer` and inherit from a common `BaseIterator` that provides standard iterator operations.

---

## Features

* add(const T& value): Insert a new value (duplicates allowed)
* remove(const T& value): Remove all occurrences (throws if not found)
* size() const: Get the current number of elements
* operator<<: Print container in insertion order
* begin()/end(): Enable range-based for loops
* Snapshot behavior: Iterators retain their own copy of traversal order

---

## Requirements

* C++17 or later
* `T` must support `operator<` and `operator==`
* No memory leaks (verified via valgrind)

---

## Repository Structure

```sh
MyContainerProject/
├── Demo.cpp                # Extended demonstration
├── Makefile                # Build/test/clean/valgrind targets
├── include/
│   ├── MyContainer.hpp     # Core container template
│   └── iterators/          # Custom iterators:
│       ├── BaseIterator.hpp
│       ├── Order.hpp
│       ├── AscendingOrder.hpp
│       ├── DescendingOrder.hpp
│       ├── ReverseOrder.hpp
│       ├── SideCrossOrder.hpp
│       └── MiddleOutOrder.hpp
├── tests/                  # Unit tests (doctest framework)
│   ├── test_core.cpp
│   ├── test_order.cpp
│   ├── test_ascending.cpp
│   ├── test_descending.cpp
│   ├── test_reverse.cpp
│   ├── test_sidecross.cpp
│   ├── test_middleout.cpp
│   ├── test_exceptions.cpp
│   └── test_snapshot.cpp
```

---

## Build & Run

Make sure you have `make` and `g++` installed.

### Common Commands:

| Command         | Description                    |
| --------------- | ------------------------------ |
| `make Main`     | Build and run the demo program |
| `make test`     | Build and run unit tests       |
| `make valgrind` | Run tests with memory checks   |
| `make clean`    | Remove all compiled artifacts  |

---

## Design Highlights

* **Templates**: `MyContainer<T>` is fully generic
* **Iterator Inheritance**: All iterators subclass `BaseIterator` and override only the ordering logic
* **Shared Snapshot**: Iterator order is stored in `std::shared_ptr<std::vector<size_t>>` for copyable but consistent behavior
* **Robust Exceptions**: Invalid dereference or increment past end throws `std::runtime_error`
* **Tested and Leak-Free**: All functionalities are unit-tested and validated with valgrind

---

## Testing

Unit tests use the doctest framework (https://github.com/doctest/doctest):

```sh
make test      # Compile and run tests
make valgrind  # Check for memory leaks
